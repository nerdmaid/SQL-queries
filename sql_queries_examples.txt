1. Â òàáëèöå trips ñîäåðæàòñÿ ïîåçäêè òàêñîïàðêà ÎÎÎ 'ÊÅÕ Ðîìàøêà'. Äëÿ êàæäîé ïîåçäêè óêàçàíû client_id è driver_id,
êîòîðûå ÿâëÿþòñÿ âíåøíèìè êëþ÷àìè íà òàáëèöó users (ïîëå user_id).
Â ïîëå status ìîãóò ñîäåðæàòüñÿ çíà÷åíèÿ ('completed', 'cancelled_by_driver', 'cancelled_by_client').
Òàáëèöà users ñîäåðæèò âñåõ ïîëüçîâàòåëåé òàêñîïàðêà (è êëèåíòîâ è âîäèòåëåé).
Â ïîëå role óêàçàíà èõ ðîëü â òàêñîïàðêå, à â ïîëå banned èõ ñòàòóñ áëîêèðîâêè.
Íàïèøèòå çàïðîñ, êîòîðûé íàéäåò êîýôôèöèåíò îòìåíû â ïðîìåæóòêå ìåæäó 2020-02-01 è 2020-02-03.
Êîýôôèöèåíò îòìåíû - îòíîøåíèå îòìåíåííûõ ïîåçäîê ê îáùåìó êîëè÷åñòâó ïîåçäîê.
Ó÷èòûâàòü íóæíî òîëüêî íåçàáëîêèðîâàííûõ ïîëüçîâàòåëåé (íåçàáëîêèðîâàíû äîëæíû áûòü è êëèåíò è âîäèòåëü).
Îãðàíè÷åíèÿ: çàïðåùåíî èñïîëüçîâàòü HAVING, JOIN, ñâÿçàííûå ïîäçàïðîñû (îáðàùåíèå â ïîäçàïðîñå ê òàáëèöàì èç âíåøíåãî çàïðîñà), LIMIT, UNION, UNION ALL, VALUES.

SELECT trips.request_at, 
	TRUNCATE(
		SUM(CASE WHEN trips.status != 'completed' THEN 1 ELSE 0 END) / COUNT(*), 2
		) as cancel_rate
FROM 
	trips, users
    WHERE trips.client_id NOT IN (SELECT user_id FROM users WHERE banned = '1')
    AND trips.driver_id NOT IN (SELECT user_id FROM users WHERE banned = '1')
	AND (trips.request_at BETWEEN '2020-02-01' AND '2020-02-03')
GROUP BY trips.request_at

2. Äàíà òàáëè÷êè ñ òðàíçàêöèÿìè ïîëüçîâàòåëåé.
CREATE TABLE transactions (
	id int,
	user_id int4,
	amount int4,
	dtime timestamp
);
Íóæíî íàéòè íàèáîëüøåå ÷èñëî òðàíçàêöèé, êîòîðûå ñäåëàë þçåð çà 30 ñóòîê (max_count_30_day).
Ìîæíî ñ÷èòàòü, ÷òî ó îäíîãî þçåðà íåò 2 òðàíçàêöèÿ íà îäèí timestamp (timestamp = äàòà+âðåìÿ). 
Îãðàíè÷åíèÿ: çàïðåùåíî èñïîëüçîâàòü LIMIT, UNION, UNION ALL, VALUES, IN.
WITH t3 AS(
      SELECT user_id, COUNT(*) AS cnt
      FROM transactions t1
JOIN transactions t2 USING (user_id)
      WHERE t2.dtime >= t1.dtime AND  t2.dtime <  (t1.dtime + INTERVAL 30 day)
      GROUP BY t1.id,user_id
      )
SELECT user_id, MAX(cnt) AS max_count_30_day
      FROM t3
GROUP BY user_id
ORDER BY user_id

3. -- d7_buyer(id int, name text, surname text, last_action_date date);
-- d7_seller(id int, name text, surname text, last_action_date date);
-- d7_manager(id int, name text, last_action_date date);
-- d7_user(id serial, role text, registration_date date)
Ïîñ÷èòàéòå êîëè÷åñòâî ïîëüçîâàòåëåé â ðàçðåçå êâàðòàëà ðåãèñòðàöèè è ìåñÿöà. 
Ïîäâåäèòå ïîäûòîã ïî êàæäîìó ðàçðåçó  è îáùèé ïîäûòîã, îòñîðòèðóéòå ïî ïåðâîé è âòîðîé êîëîíêå.
Ôîðìàò îòâåòà 'q', 'm', 'cntd_users'

SELECT QUARTER(registration_date) as q, MONTH(registration_date) as m, COUNT(DISTINCT id) as cntd_users
      FROM d7_user
GROUP BY QUARTER(registration_date), MONTH(registration_date) WITH ROLLUP
ORDER BY 1,2

4. -- d8_scores (event_date, category, subcategory, value)
Äëÿ äàò ñ 2021-01-19 ïî 2021-01-21 âûâåäèòå ñðåäíåå çíà÷åíèå value çà ïðåäûäóùèå äâà äíÿ äëÿ êàæäîé ïîäêàòåãîðèè êàòåãîðèè A
Íàïðèìåð, äëÿ äàòû 2021-01-19 âû÷èñëåíèå ñðåäíåãî äîëæíî ïðîèñõîäèòü ïî äàòàì 2021-01-17, 2021-01-18.
Îæèäàåìûé ôîðìàò îòâåòà

WITH cte AS
      (SELECT *, AVG(value) OVER
      (
      PARTITION BY subcategory ORDER BY event_date RANGE BETWEEN INTERVAL 2 day PRECEDING AND interval 1 day PRECEDING
      ) AS last_2d_avg
      FROM d8_scores
      WHERE category = 'A')
SELECT * FROM cte
      WHERE (event_date BETWEEN '2021-01-19' AND '2021-01-21') 
      AND (category = 'A')
ORDER BY 1,2,3

5. -- create table d9_datamarts (dm varchar(64), calc_time int);
-- create table d9_dag (src varchar(64), tgt varchar(4));
 
Äàíû ðàñ÷åòû òàáëè÷åê â õðàíèëèùå äàííûõ.
d9_datamarts - õðàíèò íàçâàíèå òàáëè÷êè è âðåìÿ â ìèíóòàõ êîòîðîå íåîáõîäèìî äëÿ åå çàïîëíåíèÿ
d9_dag - õðàíèò ïîñëåäîâàòåëüíîñòü, â êîòîðîé íóæíî çàïîëíÿòü òàáëè÷êè â âèäå ïàð.
Íóæíî âûâåñòè öåïî÷êó òàáëè÷åê êîòîðàÿ çàïîëíÿåòñÿ äîëüøå âñåãî.
Öåïî÷êà ñîñòîèò èç íàçâàíèé òàáëèö, ðàçäåëåííûõ ñèìâîëàìè ' -> '

WITH recursive path(pth,prev,time) AS 
      (
   	 SELECT d1.src AS pth, 
      d1.src AS prev, 
      d2.calc_time FROM 
      d9_dag d1 JOIN d9_datamarts d2 
      ON d1.src = d2.dm
    	UNION ALL
    		SELECT CONCAT(path.pth,' -> ',dg.tgt), 
      dg.tgt, 
      path.time + dm.calc_time
    	FROM path
    		JOIN d9_dag dg 
      ON path.prev = dg.src
    		JOIN d9_datamarts dm 
      ON dg.tgt = dm.dm
      )
SELECT DISTINCT pth AS calc_path, time AS calc_time
      FROM path
WHERE time = (SELECT MAX(time) FROM path)
